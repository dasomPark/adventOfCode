const input = String.raw`\../....|.-........|.................|...\....../...............\...............|..................\........|.
.-...../.......-.......|./.........-.....-.......\...|.-...........-.......\.................-....-...........
.\....-\..|...\.....\...................................................................../................-..
.....|.............-.\....../......|.....\......................|...-.....-.........|.-......\................
........./............................-.|..|.........|.....|..................................................
................./.................|.................\...............\..................|.../.....././........
...-..|.........-.............\..|..-......./............\.-....|..|........\...-......\....../...\\..........
..............\..|............/..............|..........................................|............\........
.|...........................-.-.........-..\|...|.......|\............\|.....................................
..........-./.\.....|...................|./............./.-..............|........../.....-/..................
....../.....\/..........\.........|\...........|....--................/................../......-..........-..
-.|.......|...................../................\..................-\........-.....\.........................
...-|................................................\...........-.........\/.-......-.............|..........
.......\../....\..............|..........|.....\............|.............|......./................./....../\.
.....|..................|...|......-.....|..-....|\\.........\\........|....................|............-....
......./........./...-..-|................../...|....................|-.......\-............................./
................../......-...........|...|........./.....\..|......../..../.......|...|.................-.....
.................................../.|..........|...............\..........|...............-.............|/...
.......\.-......-................................/......|..\...\.........../........|......\.........-..-....\
....................|./.....-..../.............|...............-.../.\........-..-............/....|.......-..
...........\...........................\.|.................-...............|........-....................|..|.
..|.-.....\.......|................-.........../.............................................|....//.\........
..-...............\......../..||.....|.....\.|.........................\.....|....-.........../..../..........
..|......../.../.............|..........-...................-................\...\..\......-..................
...../...........-..../...|..\...././..\.|............\....................-|......../........................
/..|............-\..|.................../.../..................../...-........|...............-../......|-....
................/..............................................|.|......-...................|.................
....\..../.../.................\\............................................\........\................../..|.
../.-.............|......|.........\.........-\........../..........|.\.......................................
................./................./\......./........-.........................../........-..........|....\.\.
..\...../............/.............................................-.......--...|.................|...../...-.
..\......................-.......................-......-.\.-/../......./...........................-../......
...............-.................../................../.................-.........................|....\....|.
..../.\|..............-...../...|...../................\-....\..\........|....................-...............
.........................\...-...-|...................\....../........|...............-....../.../......./....
....\......../.-....-........-...../.....-.......-.\...............\.........\............./.....\-...|-..-|..
.../\................-....\.......|..-............-.\.............\..\........-............/......./......../.
..\.....|...............|..\......|..................................|......./.....\...|..|....\../......./...
......|.....././.....-..\..........................-\.............|..../.................................-/...
................|\.......|...|.|....................\..............\........................\.-...||..........
.-.......\...........-...../............/--....-..\-......................./...-.....|..........\/.....-......
...-............-.........\.....................|.........../.........../............|.-.|.....\.../...\-.....
.......................|...........\................./...................\............................|.......
......................|..|.\...............-.../................/.../.../...........................-.|.......
.\.|..........-.|................................../................................/.........-.\....\../.....
./............\..\............................|....../........\.........................\.......\..../.\.....-
....................../.....................|......./....../............................\....................|
..............................||....\........-..............................\..........\\........./.../.......
....\....../....................................-..-........................-................-....|.........\.
.......-......\.-\.|............................................/......-......../.......\.....................
....../...................|........-....-........./...........-.-........./....\..............................
..-/..............\............|........../....................\........-.\...................................
...-......\............/\...........\.........................-.......\.-./...................................
..........-.\.//......................--............\....../.........../-./...................................
.......\-.-..-.....\.............|............\....../........\......../...............-..............|....-..
........./.-.............\.........................-....|\..........|..../...-.........................\.\...\
.........|..\.|.........-...-........-./............|......|....................|.........../...|.............
................./....-..../\..............|../-................|.../..............-./|..-........||..........
...../.......-.............|.........-.....|.............................\........\.........\.................
.............|...../...................../.................\\.....................|\..........-....././......-
.............../..../..../....................../...\.......-..........................\\...-|.........../....
...........|........|........../..-........../......\...........-.......-.......-.......................-..|..
........................\...../.........-.........\.....|...|.........-.....-................-|.../...........
..-...............|...-...........\|.\.......\..............................\./......./..........-............
........................../....../....................................|................................../....
/.......\.................................\./............................|...\..............|...-............|
.....-.....................|.........|................-.\.....-..../..../...............-.........|...........
...|................\../..|.................|............/.....-......../.........-...\-.-.......\............
........................\....-..........|..-....../..............-..........-..|.........\.-...........\......
................................\\......./...................-...........|..................\....|...|../.....
......-.-.|...\.........|.........|....\......................................................................
...................-/....\......../...........|................/......|.-........\|./..|......../.....|..\....
....../........-...\../../..........|...\.....\.............................../......-........-...............
............\...-....|...................\............-.............|..-......|..../-.........................
...........././.-......./............../.....\...-..-.-|.....\../............-..|..|..................--..././
...................-......-...././............./.......\\...../|.................\..............\..|..........
.|.|.../..\|..-../........................................................-...................................
...............-...../.....|...|....\........|......|.............\..........................-...\............
..\.......................-..............\..-...........-...............\.\-....-.............................
..............-............/..-.......|....-/............../........|............../......|..................-
.......|..........|..-..../...................................|-......-..\......./........................\...
.........................................-......./..........|.....\../.../......|./.........................\\
...-.-.........../......./.-........//..|...................|.........-..........|........................-...
........./...../.........\.......\..............-........../-./..|.\...............|....................../...
........-.......\\.........-...\..//...-.........\\....../.-................\.......\...\............/...\....
................-...|......-.....-..|...../....../...-./.............-...........................-|...........
....-..-...........|.................../..\.....|......|...............-.-.|.........../.........../..|....../
....\......................................\................../..|...........-.\.....\.........||...........|.
.........................\.................-...............\.....\.-......................\.......-\.-........
...............-..\................\.................../.............-...................................../..
..-|../.-..|....\............-.......\.../....../...-...../|.........\..\..-..../.-..\....|........\..........
.........................../............|....................-......................................|.........
...../...........|.../........./............./......../.........-.............|..............-.......-|..-...|
..\/......./.\................/.......-............\..\............................................\..........
.......\.\.\......../|......\....................|..\..........-............./.........-...\....|../\......|..
...........\......././.........\......../...............................|........./...|.......................
............|.......|......./.............-..-.........\.....\....................../................./.......
...................................................../...../...............\........-.........................
.|...............-.............-........................|...............................-..|................/.
..............\....../../...........-.-..\........../...........-.....-......................|..../..|.|......
...................../...-.-........................../.........................|.....\.......................
.........\............\..............|.....//........-..\.../..................-.......//..........|......|..\
...../\.........\.......|....|....\...|..........\..............//........-..-.......-............-.-./.......
.........|.........................\...............................|/..........\..\...-..|..................\.
........................\..........|........./..-......\..../..|............\......./......................./|
................\.-...................|.......|/.-|....-.-.../......-.-...-.......-.........../.....-..|......
..........-.\......-.-....-............\..-.......\....-.../\..................|............/...|..../.....-..
|.....................|..\...................||............\...\......./........................-.....|..../..
.|..../.......|..........................................................|....../.....|.....|.....-...........
.......................|..-..\../.....|.........\.................-...........................................`

const inputArray = input.split(`\n`);
const widthIndex = inputArray[0].length - 1;
const heightIndex = inputArray.length - 1;

const checkIndex = (row, col) => {
    if(row < 0 || col < 0 || row > heightIndex || col > widthIndex) {
        return false;
    }

    return true;
}

const moveRight = (row, col) => [row, col +1];
const moveLeft = (row, col) => [row, col - 1];
const moveUp = (row , col) => [row - 1, col];
const moveDown = (row, col) => [row + 1, col];

const move = (step, row, col , direction) => {
    const ans = [];
    if(step === '.') {
        switch(direction) {
            // rightward
            case 'r':
                if(checkIndex(...moveRight(row, col))) {
                    ans.push([...moveRight(row, col), 'r']);
                }
                break;
            // leftward
            case 'l':
                if(checkIndex(...moveLeft(row, col))) {
                    ans.push([...moveLeft(row, col), 'l']);
                }
                break;
            // upward
            case 'u':
                if(checkIndex(...moveUp(row, col))) {
                    ans.push([...moveUp(row, col),  'u']);
                }
                break;
            // downward
            case 'd':
                if(checkIndex(...moveDown(row, col))) {
                    ans.push([...moveDown(row, col), 'd']);
                }
                break;
            default:
                break;
        }
    } else if(step === '|') {
        switch(direction) {
            // rightward or leftward
            case 'r':
            case 'l': 
                // upward
                if(checkIndex(...moveUp(row, col))) {
                    ans.push([...moveUp(row, col), 'u'])
                }
                // downward
                if(checkIndex(...moveDown(row, col))) {
                    ans.push([...moveDown(row, col), 'd']);
                }
                break;
            // upward
            case 'u':
                if(checkIndex(...moveUp(row, col))) {
                    ans.push([...moveUp(row, col), 'u']);
                }
                break;
            // downward
            case 'd':
                if(checkIndex(...moveDown(row, col))) {
                    ans.push([...moveDown(row, col), 'd']);
                }
                break;
            default:
                break;
        }
    } else if(step === '-') {
        switch(direction) {
            case 'u':
            case 'd':
                if(checkIndex(...moveLeft(row, col))) {
                    ans.push([...moveLeft(row, col), 'l']);
                }
                if(checkIndex(...moveRight(row, col))) {
                    ans.push([...moveRight(row, col), 'r'])
                }
                break;
            case 'l':
                if(checkIndex(...moveLeft(row, col))) {
                    ans.push([...moveLeft(row, col), 'l'])
                }
                break;
            case 'r':
                if(checkIndex(...moveRight(row, col))) {
                    ans.push([...moveRight(row, col), 'r']);
                }
                break;
            default:
                break;
        }
    } else if(step === '/') {
        switch(direction) {
            case 'r':
                if(checkIndex(...moveUp(row, col))) {
                    ans.push([...moveUp(row, col), 'u']);
                }
                break;
            case 'l':
                if(checkIndex(...moveDown(row, col))) {
                    ans.push([...moveDown(row, col), 'd']);
                }
                break;
            case 'u':
                if(checkIndex(...moveRight(row, col))) {
                    ans.push([...moveRight(row, col), 'r']);
                }
                break;
            case 'd':
                if(checkIndex(...moveLeft(row, col))) {
                    ans.push([...moveLeft(row, col), 'l']);
                }
                break;
            default:
                break;
        }
    } else if(step === `\\`) {
        switch(direction) {
            case 'r':
                if(checkIndex(...moveDown(row, col))) {
                    ans.push([...moveDown(row, col), 'd']);
                }
                break;
            case 'l':
                if(checkIndex(...moveUp(row, col))) {
                    ans.push([...moveUp(row, col), 'u']);
                }
                break;
            case 'u':
                if(checkIndex(...moveLeft(row, col))) {
                    ans.push([...moveLeft(row, col), 'l']);
                }
                break;
            case 'd':
                if(checkIndex(...moveRight(row, col))) {
                    ans.push([...moveRight(row, col), 'r']);
                }
                break;
            default:
                break;
        }
    }

    return ans;

}

const navigate = (inputArray, row, col, direction, visitedDotMap, visitedStepMap) => {
    if(inputArray[row][col] === '.') {
        visitedDotMap[row][col] = direction;
    } else {
        visitedStepMap[row][col] = true;
    }

    const nextSteps = move(inputArray[row][col] ,row, col, direction);
    for(let i = 0; i < nextSteps.length; i++) {
        const step = nextSteps[i];
        const newRow = step[0];
        const newCol = step[1];
        const newDirection = step[2];

        if(visitedDotMap[newRow][newCol] && visitedDotMap[newRow][newCol] === newDirection) {
            continue;
        }  

        navigate(inputArray, newRow, newCol, newDirection, visitedDotMap, visitedStepMap);
    }

    return [visitedDotMap, visitedStepMap];
}

const countEnergizedTiles = (visitedDotMap, visitedStepMap) => {
    var count = 0;
    // const testMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));

    for(let i = 0; i < visitedDotMap.length; i++) {
        for(let j = 0; j < visitedDotMap[i].length; j++) {
            const visited = visitedDotMap[i][j];
            if(visited) {
                count++;
            }
        }
    }

    for(let i = 0; i < visitedStepMap.length; i++) {
        for(let j = 0; j < visitedStepMap[i].length; j++) {
            const visited = visitedStepMap[i][j];
            if(visited) {
                count++;
            }
        }
    }

    return count;
}

const countList = [];

// top Edge
for(var i = 0; i < inputArray[0].length; i++) {
    var visitedDotMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));
    var visitedStepMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));

    navigate(inputArray, 0, i, 'd', visitedDotMap, visitedStepMap);
    const count = countEnergizedTiles(visitedDotMap, visitedStepMap);
    countList.push(count)
}

// bottom edge
for(var i = 0; i < inputArray[inputArray.length - 1].length; i++) {
    var visitedDotMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));
    var visitedStepMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));

    navigate(inputArray, inputArray.length - 1, i, 'u', visitedDotMap, visitedStepMap);
    const count = countEnergizedTiles(visitedDotMap, visitedStepMap);
    countList.push(count)
}

// left edge
const leftEdge = inputArray.map(input => input.charAt(0)).join('');
for(var i = 0; i < leftEdge.length; i++) {
    var visitedDotMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));
    var visitedStepMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));

    navigate(inputArray, i, 0, 'r', visitedDotMap, visitedStepMap);
    const count = countEnergizedTiles(visitedDotMap, visitedStepMap);
    countList.push(count)
}

// right edge
const rightEdge = inputArray.map(input => input.charAt(input.length - 1)).join('');
for(var i = 0; i < rightEdge.length; i++) {
    var visitedDotMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));
    var visitedStepMap = [...Array(widthIndex + 1)].map(e => Array(heightIndex + 1));

    navigate(inputArray, i, rightEdge.length - 1, 'l', visitedDotMap, visitedStepMap);
    const count = countEnergizedTiles(visitedDotMap, visitedStepMap);
    countList.push(count)
}

console.log(Math.max(...countList));